# -*- coding: utf-8 -*-
"""Financial Advisory.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LRj4qhNwLR4kkCYggGfe0Iwc6Hrg7TD4
"""

import pandas as pd
import numpy as np
import random

# Set random seed for reproducibility
np.random.seed(42)

# Define realistic ranges for each feature
ages = np.random.randint(25, 65, size=10000)
genders = np.random.choice(['M', 'F'], size=10000)
marital_statuses = np.random.choice(['Single', 'Married', 'Divorced', 'Widowed'], size=10000)
num_dependents = np.random.randint(0, 4, size=10000)
education_levels = np.random.choice(['High School', 'Associate', 'Bachelor', 'Master', 'PhD'], size=10000)
employment_statuses = np.random.choice(['Employed', 'Self-employed', 'Unemployed', 'Part-time', 'Retired'], size=10000)
incomes = np.random.randint(30000, 150000, size=10000)
expenses = np.random.randint(1000, 6000, size=10000)
assets = np.random.randint(20000, 500000, size=10000)
liabilities = np.random.randint(5000, 200000, size=10000)
credit_scores = np.random.randint(600, 800, size=10000)
monthly_savings = np.random.randint(200, 3000, size=10000)
monthly_spending = np.random.randint(1000, 5000, size=10000)
num_transactions = np.random.randint(10, 50, size=10000)
investment_portfolios = np.random.choice(['Stocks', 'Bonds', 'Mutual Funds', 'Real Estate'], size=10000)
investment_values = np.random.randint(10000, 300000, size=10000)
risk_tolerances = np.random.choice(['Low', 'Medium', 'High'], size=10000)
investment_goals = np.random.choice(['Retirement', 'Education', 'Emergency Fund', 'Wealth Accumulation', 'Short-term Savings'], size=10000)
spending_habits = np.random.choice(['Frugal', 'Moderate', 'Extravagant'], size=10000)
saving_habits = np.random.choice(['Regular', 'Irregular'], size=10000)
investment_frequencies = np.random.choice(['Monthly', 'Quarterly', 'Yearly'], size=10000)
financial_literacies = np.random.choice(['Low', 'Medium', 'High'], size=10000)
investment_preferences = np.random.choice(['Conservative', 'Technology', 'Real Estate', 'Healthcare', 'Energy', 'Utilities', 'Consumer Goods', 'Financial Services', 'Communication Services', 'Industrial'], size=10000)

# Define a function to generate realistic advisory recommendations based on multiple factors
def generate_advisory_recommendation(row):
    # Define logic for generating recommendations
    if row['income'] < 50000:
        if row['expenses'] > 3000:
            return 'Focus on reducing expenses'
        elif row['monthly_savings'] < 500:
            return 'Increase your savings rate'
        else:
            return 'Build an emergency fund'
    elif row['income'] >= 50000 and row['income'] < 100000:
        if row['investment_value'] < 50000:
            if row['risk_tolerance'] == 'Low':
                return 'Invest in low-risk bonds'
            elif row['risk_tolerance'] == 'Medium':
                return 'Consider balanced mutual funds'
            else:
                return 'Diversify with stocks and real estate'
        else:
            if row['investment_goals'] == 'Retirement':
                return 'Maximize retirement account contributions'
            elif row['investment_goals'] == 'Wealth Accumulation':
                return 'Invest in high-growth stocks'
            else:
                return 'Focus on your investment goals'
    else:
        if row['investment_preferences'] == 'Conservative':
            return 'Preserve capital with bonds and safe investments'
        elif row['investment_preferences'] == 'Technology':
            return 'Invest in high-growth tech stocks'
        elif row['investment_preferences'] == 'Real Estate':
            return 'Expand your real estate portfolio'
        elif row['investment_preferences'] == 'Healthcare':
            return 'Balance your portfolio with healthcare investments'
        elif row['investment_preferences'] == 'Energy':
            return 'Invest in energy sector stocks'
        elif row['investment_preferences'] == 'Utilities':
            return 'Consider stable utility stocks'
        elif row['investment_preferences'] == 'Consumer Goods':
            return 'Invest in consumer goods companies'
        elif row['investment_preferences'] == 'Financial Services':
            return 'Invest in financial services stocks'
        elif row['investment_preferences'] == 'Communication Services':
            return 'Invest in communication services companies'
        else:
            return 'Invest in industrial sector stocks'

# Combine all features into a DataFrame
data = pd.DataFrame({
    'age': ages,
    'gender': genders,
    'marital_status': marital_statuses,
    'num_dependents': num_dependents,
    'education_level': education_levels,
    'employment_status': employment_statuses,
    'income': incomes,
    'expenses': expenses,
    'assets': assets,
    'liabilities': liabilities,
    'credit_score': credit_scores,
    'monthly_savings': monthly_savings,
    'monthly_spending': monthly_spending,
    'num_transactions': num_transactions,
    'investment_portfolio': investment_portfolios,
    'investment_value': investment_values,
    'risk_tolerance': risk_tolerances,
    'investment_goals': investment_goals,
    'spending_habits': spending_habits,
    'saving_habits': saving_habits,
    'investment_frequency': investment_frequencies,
    'financial_literacy': financial_literacies,
    'investment_preferences': investment_preferences
})

# Apply the function to generate advisory recommendations
data['advisory_recommendation'] = data.apply(generate_advisory_recommendation, axis=1)

# Save the generated data to a CSV file
data.to_csv('generated_financial_advisory_data.csv', index=False)

print(data.head())

import pandas as pd
import numpy as np

# Load the dataset
data = pd.read_csv('generated_financial_advisory_data.csv')

# Display the first few rows of the dataset
print(data.head())

import seaborn as sns
import matplotlib.pyplot as plt

# Summary statistics
print(data.describe())

# Check for missing values
print(data.isnull().sum())

# Visualize the distribution of key features
sns.histplot(data['income'], kde=True)
plt.title('Income Distribution')
plt.show()

sns.countplot(x='risk_tolerance', data=data)
plt.title('Risk Tolerance Distribution')
plt.show()

# More visualizations as needed



from google.colab import drive
drive.mount('/content/drive')

from sklearn.preprocessing import LabelEncoder, StandardScaler

# Encode categorical variables
label_encoders = {}
categorical_columns = [
    'gender', 'marital_status', 'education_level', 'employment_status',
    'investment_portfolio', 'risk_tolerance', 'investment_goals',
    'spending_habits', 'saving_habits', 'investment_frequency',
    'financial_literacy', 'investment_preferences', 'advisory_recommendation'
]

for column in categorical_columns:
    le = LabelEncoder()
    data[column] = le.fit_transform(data[column])
    label_encoders[column] = le

# Scale numerical features
scaler = StandardScaler()
numerical_columns = [
    'age', 'num_dependents', 'income', 'expenses', 'assets', 'liabilities',
    'credit_score', 'monthly_savings', 'monthly_spending', 'num_transactions',
    'investment_value'
]

data[numerical_columns] = scaler.fit_transform(data[numerical_columns])

# Split the data into features and target
X = data.drop('advisory_recommendation', axis=1)
y = data['advisory_recommendation']

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

# Feature importance
feature_importances = pd.Series(model.feature_importances_, index=X.columns)
feature_importances.sort_values(ascending=False).plot(kind='bar')
plt.title('Feature Importances')
plt.show()

import joblib

# Save the trained model
joblib.dump(model, 'financial_advisory_model.pkl')

# Save the label encoders and scaler
joblib.dump(label_encoders, 'label_encoders.pkl')
joblib.dump(scaler, 'scaler.pkl')

print("Model and preprocessors saved!")